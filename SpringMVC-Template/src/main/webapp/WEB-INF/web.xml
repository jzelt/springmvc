<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" 
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

    <!-- Log4j configuration loading:
         By default, log4j will simply read its configuration from a "log4j.properties" or 
         "log4j.xml" file in the root of the classpath, so this block is not needed unless
         you want to override the default log4j initialization.
         If used, this listener should be registered before ContextLoaderListener.
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>/WEB-INF/classes/log4j.xml</param-value>
    </context-param>
    -->

    <!-- Configure ContextLoaderListener to use AnnotationConfigWebApplicationContext
         instead of the default XmlWebApplicationContext. This enables "JavaConfig". -->
    <context-param>
        <param-name>contextClass</param-name>
        <param-value>
            org.springframework.web.context.support.AnnotationConfigWebApplicationContext
        </param-value>
    </context-param>

    <!-- Configuration location for the root Spring container shared by all servlets and filters:
    
         Java-based configuration (JavaConfig):
         If AnnotationConfigWebApplicationContext is specified above, this must consist of one 
         or more comma- or space-delimited fully-qualified @Configuration classes. Fully-qualified 
         packages may also be specified for component-scanning.
         
         XML-based configuration:
         If AnnotationConfigWebApplicationContext is *not* specified above, this must consist of 
         one or more comma- or space-delimited paths to XML configuration files. -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>com.borgsoftware.springmvc.spring.config.RootConfig</param-value>
        <!-- <param-value>/WEB-INF/spring/root-context.xml</param-value> -->
    </context-param>
    
    <!-- This is the bootstrap listener to start up and shut down Spring's root WebApplicationContext.
         It creates the Spring container shared by all servlets and filters.  If 
         AnnotationConfigWebApplicationContext specified above, then the root context will
         be bootstrapped from the Java class specified by the "contextConfigLocation" 
         context parameter above. If, however, AnnotationConfigWebApplicationContext is *not*
         specified above, then the root context will be bootstrapped from the XML file 
         specified by the "contextConfigLocation" context parameter above. -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- The webAppRootKey is a context parameter that exposes the webapp root as a system property 
         that can be used elsewhere. It will have a value of ${CATALINA_HOME}/webapp/<webapp-name>.
         For example, it can be used in log4j configuration files as, for example:
            log4j.appender.testfile.File=${springmvcappname.root}/WEB-INF/testlog.log
        See:
            http://stackoverflow.com/questions/5014651/webapproot-in-spring
            http://forum.spring.io/forum/spring-projects/web/15031-problems-with-setting-webapprootkey-in-web-xml
    -->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>springmvcappname.root</param-value>
    </context-param>

    <!-- Set up the DispatcherServlet to processes all application requests: -->
    <servlet>
        <servlet-name>appServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        
        <!-- Configure DispatcherServlet to use AnnotationConfigWebApplicationContext
             instead of the default XmlWebApplicationContext, as we also did above. -->
        <init-param>
            <param-name>contextClass</param-name>
            <param-value>
                org.springframework.web.context.support.AnnotationConfigWebApplicationContext
            </param-value>
        </init-param>

        <!-- As above, the config location must consist of one or more comma- or space-delimited
             and fully-qualified @Configuration Java classes if AnnotationConfigWebApplicationContext
             is specified for bootstrapping the Spring context; otherwise, it must consist of 
             one or more comma- or space-delimited paths to XML configuration files.
             
             Note 1:  If we use Javaconfig here, then in addition the the @Configuration class, we
                      can also specify one or more packages that will be scanned for annotated classes
                      (@Configuration, @Controller, ...). This approach replaces the XML-config mechanism:
                      <context:component-scan base-package="com.my.stuff"/>.
                      
             Note 2:  If AnnotationConfigWebApplicationContext is not specified and we do not provide a
             path to an XML configuration file, Spring MVC will look for a file named  SSS-servlet.xml 
             where SSS is the name of the DispatcherServlet.
             
             com.borgsoftware.springmvc.spring.config.WebConfig is the class 
             used for JavaConfig for Spring MVC.
             
             com.borgsoftware.springmvc.web is a package containing all Spring 
             MVC controllers. This ensures all controllers will be registered
             automatically.
              -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>
                com.borgsoftware.springmvc.spring.config.WebConfig
                com.borgsoftware.springmvc.web
            </param-value>
            <!-- <param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value> -->
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <!-- map all requests to the dispatcher servlet -->
    <servlet-mapping>
        <servlet-name>appServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

</web-app>
